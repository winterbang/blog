<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Winter'Blog]]></title>
  <link href="http://www.rails.pub/categories/ruby/atom.xml" rel="self"/>
  <link href="http://www.rails.pub/"/>
  <updated>2016-06-08T09:12:28+08:00</updated>
  <id>http://www.rails.pub/</id>
  <author>
    <name><![CDATA[Winter]]></name>
    <email><![CDATA[{"address"=>&#8220;zwtao90@gmail.com&#8221;, &#8220;share_subject&#8221;=>&#8221;:title by :author&#8221;, &#8220;share_message&#8221;=>&#8221;:title by :author - :url&#8221;, &#8220;share_link_text&#8221;=>&#8221;Email&#8221;, &#8220;share_link_title&#8221;=>&#8221;Share via email&#8221;, &#8220;contact_link_text&#8221;=>&#8221;Email :author&#8221;, &#8220;contact_link_title&#8221;=>&#8221;Email :author&#8221;}]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Public Protected Private的微妙的区别]]></title>
    <link href="http://www.rails.pub/blog/2015/09/02/ruby/"/>
    <updated>2015-09-02T20:30:15+08:00</updated>
    <id>http://www.rails.pub/blog/2015/09/02/ruby</id>
    <content type="html"><![CDATA[<p>这三者的区别很微妙，尤其protected和private，在很长的一段时间里我一直没有明白他俩共同存在的意义，然而黑格尔说过：存在即合理。</p>

<blockquote><p>public</p></blockquote>

<p>即定义普通的方法，这个不用多说什么，都明白</p>

<blockquote><p>protected</p></blockquote>

<p>它规定的方法的特性介于public和private之间，首先它定义的方法是不对外调用的，所谓的不对外调用就是说你可以在本类的继承链上的任何子类和当前类中调用，它与public相同的是必须又对象来调用不能直接用方法名来执行</p>

<blockquote><p>private</p></blockquote>

<p>说它保守吧也确实，它规定的方法只能在当前类中使用，说它不保守吧，直接使用不用附属对象，默认就是当前对象，确实已经私有了，它的调用者也就确定了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function, Lambda, Proc, Blcok的区别]]></title>
    <link href="http://www.rails.pub/blog/2015/07/31/ruby/"/>
    <updated>2015-07-31T22:59:17+08:00</updated>
    <id>http://www.rails.pub/blog/2015/07/31/ruby</id>
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>对象    </th>
<th>方法名  </th>
<th>参数                     </th>
<th>返回值                          </th>
<th>执行上下文       </th>
</tr>
</thead>
<tbody>
<tr>
<td>function</td>
<td>有方法名 </td>
<td>参数（可选，调用时严格匹配）</td>
<td>有返回值，return跳出当前方法</td>
<td>任何地方都可以执行</td>
</tr>
<tr>
<td>lambda  </td>
<td>有块名   </td>
<td>参数（可选，调用时严格匹配）</td>
<td>有返回值，return跳出当前块  </td>
<td>只有在函数体中或调用#call来执行</td>
</tr>
<tr>
<td>proc    </td>
<td>有块名  </td>
<td>参数（可选，调用时非严格匹配）</td>
<td>无返回值，一个执行的过程，return跳出当前作用域</td>
<td>只有在函数体中或调用#call来执行</td>
</tr>
<tr>
<td>block   </td>
<td>匿名块  </td>
<td>参数（可选，调用时非严格匹配）</td>
<td>无返回值，一个执行的过程，return跳出当前作用域</td>
<td>只能在函数体中执行</td>
</tr>
</tbody>
</table>


<p>function -> lambda -> proc -> block 是一个越来越抽象的过渡的过程:</p>

<blockquote><p>function</p></blockquote>

<p>对我们来说最比较熟悉的应该是function了，说白了就是数学中的映射，我们传给funciton一个参数，通过内部定义的一些逻辑处理得到一个返回值，从某种意义上来说，我觉得funciton和变量没什么区别，不论是function还是变量，我们从他们中得到的是个对象，只是function返回的对象可以由我们传入的参数动态的操作，其次function与其他的三种的不同是因为有了自己的作用域，定义的内部只能使用当前调用对象有资格去使用的binding，function附属于它自己的归属者。</p>

<blockquote><p>lambda</p></blockquote>

<p>广义上来说lambda，proc，block都是block，广义的block和function的主要区别就是作用域，当然广义的block有自己的作用域，它限制了外部去访问里面的binding，但它没有限制内部去调用外部的binding，当然他们的调用也必须像function一样附属在对象上，只是function在定义的时候就已经知道了他附属的对象，而block需要在执行的时候去绑定他的调用对象且必须在方法中执行，lambda和function的区别也就是广义的block和funciton的区别了。</p>

<blockquote><p>proc</p></blockquote>

<p>比lambda更随意了，它简单的只是个执行过程，没有自己的返回值，就像是浮动着的一块代码，你放哪里执行就在哪里执行一下。</p>

<blockquote><p>block</p></blockquote>

<p>是更纯粹的block了，它连名字都没有了。</p>

<p>小结：function像是一个特别规矩的好孩子，墨守成规的工作着，lambda像是一个有些调皮但还算明事理的孩子，proc就有点不听话了，至于blcok就太过分了自己叫啥都不知道了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Include和extend的使用]]></title>
    <link href="http://www.rails.pub/blog/2015/06/17/syntax/"/>
    <updated>2015-06-17T12:08:58+08:00</updated>
    <id>http://www.rails.pub/blog/2015/06/17/syntax</id>
    <content type="html"><![CDATA[<p>1.在类定义中引入模块，是模块中的方法成为类的实例方法。这种情况是最常见的，直接 <code>include</code> 即可。</p>

<pre><code class="ruby">module Basic
    def add(number)
        self + number
    end
end

Fixnum.class_eval do
    include Basic
end

3.add 4  #=&gt; 7 
</code></pre>

<p>2.在类定义中引入模块，使模块中的方法成为类的实例方法。这种情况也是比较常见的，直接 <code>extend</code> 即可。</p>

<pre><code class="ruby">module ExtendMe
    def verbal_object_id
         "my object id is #{self.object_id}"
    end
end

class Person
    extend ExtendMe
end

Person.verbal_object_id #=&gt; "my object id is 24339630"
</code></pre>

<p>3.有时在类定义中引入模块，既希望引入实例方法，也希望引入类方法，这时需要使用 <code>include</code> ，但是在模块中对类方法的定义有所不同，定义出现在</p>

<pre><code class="ruby">module ExtendThroughInclude
    def self.included(klass)
        klass.extend ClassMethods
    end

    def instance_method
        "this is an instance method of #{self.class}"
    end

    module ClassMethods
        def class_method
            "this is a method on the #{self} class"
        end
    end
end

class Person
    include ExtendThroughInclude
end

Person.new.instance_method #=&gt; "this is an instance method Person"
Person.new.instance_method #=&gt; "this is a method on the Person class"
</code></pre>
]]></content>
  </entry>
  
</feed>
