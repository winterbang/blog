<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Winter'Blog]]></title>
  <link href="http://www.wentao.pub/atom.xml" rel="self"/>
  <link href="http://www.wentao.pub/"/>
  <updated>2017-06-09T16:25:35+08:00</updated>
  <id>http://www.wentao.pub/</id>
  <author>
    <name><![CDATA[Winter]]></name>
    <email><![CDATA[{"address"=>&#8220;zwtao90@gmail.com&#8221;, &#8220;share_subject&#8221;=>&#8221;:title by :author&#8221;, &#8220;share_message&#8221;=>&#8221;:title by :author - :url&#8221;, &#8220;share_link_text&#8221;=>&#8221;Email&#8221;, &#8220;share_link_title&#8221;=>&#8221;Share via email&#8221;, &#8220;contact_link_text&#8221;=>&#8221;Email :author&#8221;, &#8220;contact_link_title&#8221;=>&#8221;Email :author&#8221;}]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[快速获取/更新 Let's Encrypt 证书]]></title>
    <link href="http://www.wentao.pub/blog/2017/06/09/lets-encrypt/"/>
    <updated>2017-06-09T16:07:53+08:00</updated>
    <id>http://www.wentao.pub/blog/2017/06/09/lets-encrypt</id>
    <content type="html"><![CDATA[<h2>一个快速获取/更新 Let&rsquo;s encrypt 证书的 shell script</h2>

<p>调用 acme_tiny.py 认证、获取、更新证书，不需要额外的依赖。</p>

<p><strong>下载到本地</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget https://raw.githubusercontent.com/xdtianyu/scripts/master/lets-encrypt/letsencrypt.conf
</span><span class='line'>wget https://raw.githubusercontent.com/xdtianyu/scripts/master/lets-encrypt/letsencrypt.sh
</span><span class='line'>chmod +x letsencrypt.sh</span></code></pre></td></tr></table></div></figure>


<p><strong>配置文件</strong></p>

<p>只需要修改 DOMAIN_KEY DOMAIN_DIR DOMAINS 为你自己的信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ACCOUNT_KEY="letsencrypt-account.key"
</span><span class='line'>DOMAIN_KEY="example.com.key"
</span><span class='line'>DOMAIN_DIR="/var/www/example.com"
</span><span class='line'>DOMAINS="DNS:example.com,DNS:whatever.example.com"
</span><span class='line'>#ECC=TRUE
</span><span class='line'>#LIGHTTPD=TRUE</span></code></pre></td></tr></table></div></figure>


<p>执行过程中会自动生成需要的 key 文件。其中 <code>ACCOUNT_KEY</code> 为账户密钥， <code>DOMAIN_KEY</code> 为域名私钥， <code>DOMAIN_DIR</code> 为域名指向的目录，<code>DOMAINS</code> 为要签的域名列表， 需要 <code>ECC</code> 证书时取消 <code>#ECC=TRUE</code> 的注释，需要为 <code>lighttpd</code> 生成 <code>pem</code> 文件时，取消 <code>#LIGHTTPD=TRUE</code> 的注释。</p>

<p><strong>运行</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./letsencrypt.sh letsencrypt.conf</span></code></pre></td></tr></table></div></figure>


<p><strong>注意</strong></p>

<p>需要已经绑定域名到 <code>/var/www/example.com</code> 目录，即通过 <code>http://example.com</code> <code>http://whatever.example.com</code> 可以访问到 <code>/var/www/example.com</code> 目录，用于域名的验证</p>

<p><strong>将会生成如下几个文件</strong></p>

<pre><code>lets-encrypt-x1-cross-signed.pem
example.chained.crt          # 即网上搜索教程里常见的 fullchain.pem
example.com.key              # 即网上搜索教程里常见的 privkey.pem
example.crt
example.csr
</code></pre>

<p><strong>在 nginx 里添加 ssl 相关的配置</strong></p>

<pre><code>ssl_certificate     /path/to/cert/example.chained.crt;
ssl_certificate_key /path/to/cert/example.key;
</code></pre>

<p><strong>cron 定时任务</strong></p>

<p>每个月自动更新一次证书，可以在脚本最后加入 service nginx reload等重新加载服务。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0 0 1 * * /etc/nginx/certs/letsencrypt.sh /etc/nginx/certs/letsencrypt.conf &gt;&gt; /var/log/lets-encrypt.log 2&gt;&1</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[扩展js方法的最佳方式]]></title>
    <link href="http://www.wentao.pub/blog/2017/06/02/extending-javascript-the-right-way/"/>
    <updated>2017-06-02T13:48:25+08:00</updated>
    <id>http://www.wentao.pub/blog/2017/06/02/extending-javascript-the-right-way</id>
    <content type="html"><![CDATA[<p>  JavaScript已经内置了很多强大的方法，但有时你需要的某个功能在内置的方法中没有，我们怎么来优雅地扩展JavaScript功能呢。</p>

<p>  例如我们想增加一个capitalize()方法来实现首字母大写，通常我们这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">capitalize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">capitalize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>  上面的代码可以正常使用，但如果在某个地方有下面的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">strings</span> <span class="o">=</span> <span class="s2">&quot;yay&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">strings</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="nx">strings</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>  我们得到的结果是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="mi">0</span><span class="o">:</span> <span class="nx">y</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="nx">a</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span> <span class="nx">y</span>
</span><span class='line'><span class="nx">capitalize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>  这显然不是我们想要的结果，输出了我们增加的方法的原因是我们增加的方法的enumerable属性默认为true。</p>

<p>  我们可以通过简单地把枚举属性(enumerable)设置为false避免这个问题，使用defineProperty方法进行功能的扩展：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">capitalize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;capitalize&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>       <span class="p">},</span>
</span><span class='line'>       <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>  现在我们再运行这段代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">strings</span> <span class="o">=</span> <span class="s2">&quot;yay&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">strings</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="s2">&quot;:&quot;</span> <span class="o">+</span> <span class="nx">strings</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>  我们得到的结果是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="mi">0</span><span class="o">:</span> <span class="nx">y</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="nx">a</span>
</span><span class='line'><span class="mi">2</span><span class="o">:</span> <span class="nx">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>  要注意的是，用循环没有输出的并不代表不存在，我们可以通过下面的代码查看到定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">strings</span> <span class="o">=</span> <span class="s2">&quot;yay&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nx">capitalize</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>  会输出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>  用这种方式扩展JavaScript功能比较灵活，我们可以用这种方式来定义我们自己的对象，并设置一些默认值。
  以下是另外几个扩展方法，你可以在自己的项目中使用：
  String.pxToInt()
  把&#8221;200px&#8221;这样的字符串转换为数字 200 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pxToInt</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;pxToInt&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;px&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <code>String.isHex()</code> 判断一个字符串是否是16进制表示的，如&#8221;#CCC&#8221; 或 &ldquo;#CACACA&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">isHex</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;isHex&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;#&#39;</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                   <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">7</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                   <span class="sr">/^[0-9a-fA-F]+$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <code>String.reverse()</code> 字符串反转：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reverse</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;reverse&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span> <span class="s1">&#39;&#39;</span> <span class="p">).</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span> <span class="s1">&#39;&#39;</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <code>String.wordCount()</code> 统计单词数量，用空格分开</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">wordCount</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;wordCount&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <code>String.htmlEntities()</code> html标签如&lt;和>编码为特殊字符</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">htmlEntities</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;htmlEntities&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&amp;/g</span><span class="p">,</span> <span class="s1">&#39;&amp;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="c1">//g, &#39;&gt;&#39;).replace(/&quot;/g, &#39;&quot;&#39;);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <code>String.stripTags()</code> 去掉HTML标签：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">stripTags</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;stripTags&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&lt;\/?[^&gt;]+&gt;/gi</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>String.trim()</code> 去掉首尾空格：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">trim</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;trim&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\s*/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\s*$/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>String.stripNonAlpha()</code> 去掉非字母字符：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='JS'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">stripNonAlpha</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;stripNonAlpha&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^A-Za-z ]+/g</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Object.sizeof()</code> 统计对象的大小，如{one: “and”, two: “and”}为2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='JS'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sizeof</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;sizeof&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span><span class="p">(</span><span class="nx">index</span> <span class="k">in</span> <span class="k">this</span><span class="p">)</span> <span class="nx">counter</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">counter</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>总结：</p>

<p>这种方式扩展JS原生对象的功能还是挺不错的，但除非必要(项目中用的很多)，不建议直接在原生对象上扩展功能，会造成全局变量污染。</p>

<p>　　另外，文中的pxToInt()方法是没什么必要的，JS中的parseInt()可以直接完成这样的功能：parsetInt(&ldquo;200px&rdquo;)===200</p>

<p>　　htmlEntities方法貌似有问题，下面另提供一个：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">htmlEntities</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s1">&#39;htmlEntities&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span><span class="p">){</span>
</span><span class='line'>                <span class="nx">div</span><span class="p">.</span><span class="nx">textContent</span><span class="o">=</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span><span class="p">{</span>
</span><span class='line'>                <span class="nx">div</span><span class="p">.</span><span class="nx">innerText</span><span class="o">=</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Public Protected Private的微妙的区别]]></title>
    <link href="http://www.wentao.pub/blog/2015/09/02/ruby/"/>
    <updated>2015-09-02T20:30:15+08:00</updated>
    <id>http://www.wentao.pub/blog/2015/09/02/ruby</id>
    <content type="html"><![CDATA[<p>这三者的区别很微妙，尤其protected和private，在很长的一段时间里我一直没有明白他俩共同存在的意义，然而黑格尔说过：存在即合理。</p>

<blockquote><p>public</p></blockquote>

<p>即定义普通的方法，这个不用多说什么，都明白</p>

<blockquote><p>protected</p></blockquote>

<p>它规定的方法的特性介于public和private之间，首先它定义的方法是不对外调用的，所谓的不对外调用就是说你可以在本类的继承链上的任何子类和当前类中调用，它与public相同的是必须又对象来调用不能直接用方法名来执行</p>

<blockquote><p>private</p></blockquote>

<p>说它保守吧也确实，它规定的方法只能在当前类中使用，说它不保守吧，直接使用不用附属对象，默认就是当前对象，确实已经私有了，它的调用者也就确定了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function, Lambda, Proc, Blcok的区别]]></title>
    <link href="http://www.wentao.pub/blog/2015/07/31/ruby/"/>
    <updated>2015-07-31T22:59:17+08:00</updated>
    <id>http://www.wentao.pub/blog/2015/07/31/ruby</id>
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>对象    </th>
<th>方法名  </th>
<th>参数                     </th>
<th>返回值                          </th>
<th>执行上下文       </th>
</tr>
</thead>
<tbody>
<tr>
<td>function</td>
<td>有方法名 </td>
<td>参数（可选，调用时严格匹配）</td>
<td>有返回值，return跳出当前方法</td>
<td>任何地方都可以执行</td>
</tr>
<tr>
<td>lambda  </td>
<td>有块名   </td>
<td>参数（可选，调用时严格匹配）</td>
<td>有返回值，return跳出当前块  </td>
<td>只有在函数体中或调用#call来执行</td>
</tr>
<tr>
<td>proc    </td>
<td>有块名  </td>
<td>参数（可选，调用时非严格匹配）</td>
<td>无返回值，一个执行的过程，return跳出当前作用域</td>
<td>只有在函数体中或调用#call来执行</td>
</tr>
<tr>
<td>block   </td>
<td>匿名块  </td>
<td>参数（可选，调用时非严格匹配）</td>
<td>无返回值，一个执行的过程，return跳出当前作用域</td>
<td>只能在函数体中执行</td>
</tr>
</tbody>
</table>


<p>function -> lambda -> proc -> block 是一个越来越抽象的过渡的过程:</p>

<blockquote><p>function</p></blockquote>

<p>对我们来说最比较熟悉的应该是function了，说白了就是数学中的映射，我们传给funciton一个参数，通过内部定义的一些逻辑处理得到一个返回值，从某种意义上来说，我觉得funciton和变量没什么区别，不论是function还是变量，我们从他们中得到的是个对象，只是function返回的对象可以由我们传入的参数动态的操作，其次function与其他的三种的不同是因为有了自己的作用域，定义的内部只能使用当前调用对象有资格去使用的binding，function附属于它自己的归属者。</p>

<blockquote><p>lambda</p></blockquote>

<p>广义上来说lambda，proc，block都是block，广义的block和function的主要区别就是作用域，当然广义的block有自己的作用域，它限制了外部去访问里面的binding，但它没有限制内部去调用外部的binding，当然他们的调用也必须像function一样附属在对象上，只是function在定义的时候就已经知道了他附属的对象，而block需要在执行的时候去绑定他的调用对象且必须在方法中执行，lambda和function的区别也就是广义的block和funciton的区别了。</p>

<blockquote><p>proc</p></blockquote>

<p>比lambda更随意了，它简单的只是个执行过程，没有自己的返回值，就像是浮动着的一块代码，你放哪里执行就在哪里执行一下。</p>

<blockquote><p>block</p></blockquote>

<p>是更纯粹的block了，它连名字都没有了。</p>

<p>小结：function像是一个特别规矩的好孩子，墨守成规的工作着，lambda像是一个有些调皮但还算明事理的孩子，proc就有点不听话了，至于blcok就太过分了自己叫啥都不知道了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Base]]></title>
    <link href="http://www.wentao.pub/blog/2015/06/18/git-base/"/>
    <updated>2015-06-18T11:13:48+08:00</updated>
    <id>http://www.wentao.pub/blog/2015/06/18/git-base</id>
    <content type="html"><![CDATA[<p>起步</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git init    <span class="c">#git初始化</span>
</span><span class='line'>git add -A  <span class="c">#添加所有文件到版本控制中</span>
</span></code></pre></td></tr></table></div></figure>


<p>远程仓库地址设置相关</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/winterbang/projectname <span class="c"># 检出仓库</span>
</span><span class='line'>git remote -v  <span class="c"># 查看配置中远程仓库地址</span>
</span><span class='line'>git remote add <span class="o">[</span>name<span class="o">]</span> <span class="o">[</span>url<span class="o">]</span>  <span class="c"># 给远程仓库地址命名并添加到配置中</span>
</span><span class='line'>git remote rm <span class="o">[</span>name<span class="o">]</span>  <span class="c"># 删除配置中指定的远程仓库地址</span>
</span><span class='line'>git remote <span class="nb">set</span>-url --push <span class="o">[</span>name<span class="o">]</span> <span class="o">[</span>newUrl<span class="o">]</span>  <span class="c"># 修改配置中某仓库名称的地址</span>
</span><span class='line'>git pull <span class="o">[</span>remoteName<span class="o">]</span> <span class="o">[</span>localBranchName<span class="o">]</span>  <span class="c"># 拉取指定的远程仓库到指定分支</span>
</span><span class='line'>git push <span class="o">[</span>remoteName<span class="o">]</span> <span class="o">[</span>localBranchName<span class="o">]</span>  <span class="c"># 推送指定分支到指定的远程仓库</span>
</span><span class='line'>git push <span class="o">[</span>remoteName<span class="o">]</span> <span class="o">[</span>localBranchName<span class="o">]</span>:<span class="o">[</span>remoteBranchName<span class="o">]</span>  <span class="c"># 推送本地指定分支到指定的远程分支</span>
</span></code></pre></td></tr></table></div></figure>


<p>分支操作相关</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git branch <span class="c"># 查看本地分支</span>
</span><span class='line'>git branch -r <span class="c"># 查看远程分支</span>
</span><span class='line'>git branch <span class="o">[</span>name<span class="o">]</span> <span class="c"># 创建本地分支，并不切换到新分支</span>
</span><span class='line'>git checkout <span class="o">[</span>name<span class="o">]</span> <span class="c"># 切换分支</span>
</span><span class='line'>git checkout -b <span class="o">[</span>name<span class="o">]</span> <span class="c"># 创建新分支并立即切换到新分支</span>
</span><span class='line'>git branch -d <span class="o">[</span>name<span class="o">]</span> <span class="c"># 删除已经参与合并了的分支，如果想强制删除一个分支，可以使用-D选项</span>
</span><span class='line'>git merge <span class="o">[</span>name<span class="o">]</span> <span class="c"># 将名称为[name]的分支与当前分支合并</span>
</span><span class='line'>git push origin <span class="o">[</span>name<span class="o">]</span> <span class="c"># 创建远程分支(本地分支push到远程)</span>
</span><span class='line'>git push origin :heads/<span class="o">[</span>name<span class="o">]</span> 或 <span class="nv">$ </span>git push origin :<span class="o">[</span>name<span class="o">]</span> <span class="c"># 删除远程分支</span>
</span></code></pre></td></tr></table></div></figure>


<p>标签tag操作相关</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git tag <span class="c"># 查看版本</span>
</span><span class='line'>git tag <span class="o">[</span>name<span class="o">]</span> <span class="c"># 创建版本</span>
</span><span class='line'>git tag -d <span class="o">[</span>name<span class="o">]</span> <span class="c"># 删除版本</span>
</span><span class='line'>git push origin <span class="o">[</span>name<span class="o">]</span> <span class="c"># 创建远程版本(本地版本push到远程)</span>
</span><span class='line'>git push origin :refs/tags/<span class="o">[</span>name<span class="o">]</span> <span class="c"># 删除远程版本</span>
</span><span class='line'>git pull origin --tags <span class="c"># 合并远程仓库的tag到本地</span>
</span><span class='line'>git push origin --tags <span class="c"># 上传本地tag到远程仓库</span>
</span><span class='line'>git tag -a <span class="o">[</span>name<span class="o">]</span> -m <span class="s1">&#39;yourMessage&#39;</span> <span class="c"># 创建带注释的tag</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git]]></title>
    <link href="http://www.wentao.pub/blog/2015/06/18/git-install/"/>
    <updated>2015-06-18T11:00:24+08:00</updated>
    <id>http://www.wentao.pub/blog/2015/06/18/git-install</id>
    <content type="html"><![CDATA[<h3>git 安装</h3>

<p><code>ubuntu</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install git
</span><span class='line'>sudo apt-get install git-core
</span></code></pre></td></tr></table></div></figure>


<p>
<code>mac</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install git
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu服务器相关－前言]]></title>
    <link href="http://www.wentao.pub/blog/2015/06/17/ubuntu/"/>
    <updated>2015-06-17T14:25:09+08:00</updated>
    <id>http://www.wentao.pub/blog/2015/06/17/ubuntu</id>
    <content type="html"><![CDATA[<p>假设你已经有了一台新的服务器的ip、账号（默认是root）和密码，用ssh登陆后开始以下操作：</p>

<h3>新建用户</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>useradd -m -s /bin/bash  myname
</span></code></pre></td></tr></table></div></figure>


<h3>把新用户加到<code>sudo</code> 群组</h3>

<h4>只有加到 <code>sudo</code> 群组的用户才能使用sudo命令</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adduser myname sudo
</span></code></pre></td></tr></table></div></figure>


<h3>设置新用户密码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>passwd myname
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Include和extend的使用]]></title>
    <link href="http://www.wentao.pub/blog/2015/06/17/syntax/"/>
    <updated>2015-06-17T12:08:58+08:00</updated>
    <id>http://www.wentao.pub/blog/2015/06/17/syntax</id>
    <content type="html"><![CDATA[<p>1.在类定义中引入模块，是模块中的方法成为类的实例方法。这种情况是最常见的，直接 <code>include</code> 即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Basic</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span> <span class="o">+</span> <span class="n">number</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Fixnum</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Basic</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="mi">3</span><span class="o">.</span><span class="n">add</span> <span class="mi">4</span>  <span class="c1">#=&gt; 7 </span>
</span></code></pre></td></tr></table></div></figure>


<p>2.在类定义中引入模块，使模块中的方法成为类的实例方法。这种情况也是比较常见的，直接 <code>extend</code> 即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ExtendMe</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">verbal_object_id</span>
</span><span class='line'>       <span class="s2">&quot;my object id is </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ExtendMe</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">verbal_object_id</span> <span class="c1">#=&gt; &quot;my object id is 24339630&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.有时在类定义中引入模块，既希望引入实例方法，也希望引入类方法，这时需要使用 <code>include</code> ，但是在模块中对类方法的定义有所不同，定义出现在</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ExtendThroughInclude</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span>
</span><span class='line'>      <span class="n">klass</span><span class="o">.</span><span class="n">extend</span> <span class="no">ClassMethods</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="nf">instance_method</span>
</span><span class='line'>      <span class="s2">&quot;this is an instance method of </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">class_method</span>
</span><span class='line'>          <span class="s2">&quot;this is a method on the </span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2"> class&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ExtendThroughInclude</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">instance_method</span> <span class="c1">#=&gt; &quot;this is an instance method Person&quot;</span>
</span><span class='line'><span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">instance_method</span> <span class="c1">#=&gt; &quot;this is a method on the Person class&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Commond Line]]></title>
    <link href="http://www.wentao.pub/blog/2015/06/17/octopress-commond-line/"/>
    <updated>2015-06-17T12:03:26+08:00</updated>
    <id>http://www.wentao.pub/blog/2015/06/17/octopress-commond-line</id>
    <content type="html"><![CDATA[<h2>octopress常用命令</h2>

<h3>部署到Github Pages</h3>

<h4><em>生成博文并且部署</em></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p><strong>注</strong>： 指令执行后将会生成博文并复制文件到 <code>_deploy/</code> 目录，然后添加到git， commit、push到master分支。</p>

<h4><em>提交source分支</em></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;message&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<h3>博文相关</h3>

<h4><em>新建帖子</em></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;title&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;Zombie Ninjas Attack: A survivor&#39;s retrospective&quot;</span><span class="o">]</span>
</span><span class='line'><span class="c">#Creates source/_posts/2011-07-03-zombie-ninjas-attack-a-survivors-retrospective.markdown</span>
</span></code></pre></td></tr></table></div></figure>


<h4><em>新建页面</em></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_page<span class="o">[</span>super-awesome<span class="o">]</span>
</span><span class='line'><span class="c">#creates /source/super-awesome/index.markdown</span>
</span><span class='line'>
</span><span class='line'>rake new_page<span class="o">[</span>super-awesome/page.html<span class="o">]</span>
</span><span class='line'><span class="c">#creates /source/super-awesome/page.html</span>
</span></code></pre></td></tr></table></div></figure>


<h3><em>生成和预览</em></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate <span class="c"># 在 `public/` 目录中生成帖子和页面</span>
</span><span class='line'>rake watch <span class="c"># 查看 `source/` 目录和 `sass/` 中的改变并且重新生成</span>
</span><span class='line'>rake preview <span class="c"># 将页面挂载在webserver的`http://localhost：4000`</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
