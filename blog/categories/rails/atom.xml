<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Winter'Blog]]></title>
  <link href="http://www.rails.pub/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.rails.pub/"/>
  <updated>2015-09-02T08:31:57+08:00</updated>
  <id>http://www.rails.pub/</id>
  <author>
    <name><![CDATA[Winter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Include和extend的使用]]></title>
    <link href="http://www.rails.pub/blog/2015/06/17/syntax/"/>
    <updated>2015-06-17T12:08:58+08:00</updated>
    <id>http://www.rails.pub/blog/2015/06/17/syntax</id>
    <content type="html"><![CDATA[<p>1.在类定义中引入模块，是模块中的方法成为类的实例方法。这种情况是最常见的，直接 <code>include</code> 即可。</p>

<pre><code class="ruby">module Basic
    def add(number)
        self + number
    end
end

Fixnum.class_eval do
    include Basic
end

3.add 4  #=&gt; 7 
</code></pre>

<p>2.在类定义中引入模块，使模块中的方法成为类的实例方法。这种情况也是比较常见的，直接 <code>extend</code> 即可。</p>

<pre><code class="ruby">module ExtendMe
    def verbal_object_id
         "my object id is #{self.object_id}"
    end
end

class Person
    extend ExtendMe
end

Person.verbal_object_id #=&gt; "my object id is 24339630"
</code></pre>

<p>3.有时在类定义中引入模块，既希望引入实例方法，也希望引入类方法，这时需要使用 <code>include</code> ，但是在模块中对类方法的定义有所不同，定义出现在</p>

<pre><code class="ruby">module ExtendThroughInclude
    def self.included(klass)
        klass.extend ClassMethods
    end

    def instance_method
        "this is an instance method of #{self.class}"
    end

    module ClassMethods
        def class_method
            "this is a method on the #{self} class"
        end
    end
end

class Person
    include ExtendThroughInclude
end

Person.new.instance_method #=&gt; "this is an instance method Person"
Person.new.instance_method #=&gt; "this is a method on the Person class"
</code></pre>
]]></content>
  </entry>
  
</feed>
